Sure, here is the modified code that utilizes the Uniswap contracts and actually sells the token on the DEX:


pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Router.sol";

contract AutoSwap {

  // The ERC20 token that we will be swapping into USDT.
  ERC20 public token;

  // The USDT contract address.
  address public usdtAddress;

  // The Uniswap router contract address.
  address public uniswapRouterAddress;

  // The constructor function.
  constructor(address _tokenAddress, address _usdtAddress, address _uniswapRouterAddress) {
    token = ERC20(_tokenAddress);
    usdtAddress = _usdtAddress;
    uniswapRouterAddress = _uniswapRouterAddress;
  }

  // The function that is called when tokens are transferred to the contract.
  function onTransfer(address _from, address _to, uint256 _amount) public {
    // Swap 50% of the incoming tokens into USDT.
    uint256 amountToSwap = _amount / 2;
    token.approve(uniswapRouterAddress, amountToSwap);
    IUniswapV2Router(uniswapRouterAddress).swapExactTokensForETH(amountToSwap, 0, address(this), block.timestamp + 1000);
  }

}


This code is similar to the previous code, but it also imports the `IUniswapV2Router` contract from Uniswap. This contract provides the functions that we need to swap tokens on Uniswap.

The constructor function now takes three arguments: the address of the token contract, the address of the USDT contract, and the address of the Uniswap router contract. The constructor then assigns the values of these arguments to the `token`, `usdtAddress`, and `uniswapRouterAddress` variables.

The `onTransfer` function is now called whenever tokens are transferred to the contract. This function first swaps 50% of the incoming tokens into USDT. To do this, it first calls the `approve` function on the `token` contract to approve the contract to spend 50% of the incoming tokens. It then calls the `swapExactTokensForETH` function on the `uniswapRouterAddress` contract to swap 50% of the incoming tokens for ETH. The `swapExactTokensForETH` function takes four arguments: the amount of tokens to swap, the amount of ETH to receive, the recipient of the swapped tokens, and the deadline for the swap.

This is just a basic example of how to write a Solidity contract that utilizes the Uniswap contracts and actually sells the token on the DEX. You can modify this code to meet your specific needs.



























